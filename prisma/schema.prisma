// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique @db.VarChar(100)
  firstname String @db.VarChar(50)
  lastname String @db.VarChar(50)
  username String @unique @db.VarChar(100)
  passwordHash String?
  salt String?
  photoUrl String?
  recentIssues Json[]
  assignedIssues Issue[] @relation("issueAssignee")
  role String? @db.VarChar(50)
  dateCreated DateTime @default(now())
  projectsAsCreator Project[] @relation("projectCreator")
  projectsAsMember Project[] @relation("projectMember")
  projectsAsAdmin Project[] @relation("projectAdmin")
  projectsAsLead Project[] @relation("projectLead")
  projectsAsDefaultAssignee Project[] @relation("projectDefaultAssignee")
  reportedIssues Issue[] @relation("issueReported")
  comments Comment[]
  activities Activity[]


  @@index([email])
  @@index([username])
}

model Project {
  id Int @id @default(autoincrement())
  name String @db.VarChar(30)
  description String @db.Text
  key String @db.VarChar(10)
  url String @db.VarChar(150)
  creator String
  creatorRef User @relation( "projectCreator", fields: [creator],references: [email])
  people User[] @relation("projectMember")
  admins User[] @relation("projectAdmin")
  lead String
  leadRef User @relation("projectLead", fields: [lead], references: [email])
  defaultAssignee String
  defaultAssigneeRef User @relation("projectDefaultAssignee", fields: [defaultAssignee], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime
  issues Issue[]
  


  @@index([name,key])
  @@index([key])
  @@index([creator])
  @@index([lead])
}


model Issue {
  id Int @id @default(autoincrement())
  summary String @db.VarChar(150)
  key String @db.VarChar(15)
  description String @db.Text
  type IssueType
  priority Priority
  status String
  tags String[]
  attachments Json[]
  assignee String
  assigneeRef User @relation("issueAssignee", fields: [assignee], references: [email])
  reporter String
  reporterRef User @relation("issueReported", fields: [reporter], references: [email])
  project Int
  projectRef Project @relation(fields: [project], references: [id])
  parentIssue Int
  parentIssueRef Issue @relation("linkedIssue", fields: [parentIssue], references: [id])
  childIssues Issue[] @relation("linkedIssue")
  superIssue Int
  superIssueRef Issue @relation("issuesSubtask", fields: [superIssue], references: [id])
  subTasks Issue[] @relation("issuesSubtask")
  reportedAt DateTime @default(now()) 
  dueDate DateTime
  updatedAt DateTime
  comments Comment[]
  activities Activity[]




  @@index([key])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([reporter])
  @@index([assignee])

}

enum  IssueLinkType {
  child
  parent
}

enum Priority {
  highest
  high
  mid
  low
}

enum IssueType {
  improvement
  task
  sub_task
  bug
  feature
	@@map("Type")
}

model Comment {
  id Int @id @default(autoincrement())
  author String
  authorRef User @relation( fields: [author],references: [email])
  content String @db.Text
  postedAt DateTime
  isReply Boolean?
  replyTo Int?
  replyToRef Comment? @relation("commentReply",fields: [replyTo],references: [id])
  repliedBy Comment[] @relation("commentReply")
  likes Int @default(0)
  unlikes Int @default(0)
  issue Int
  issueRef Issue @relation(fields: [issue], references: [id])
  activity Activity?

}

model Activity {
  id Int @id @default(autoincrement())
  action ActivityAction
  description String @db.Text
  comment Int? @unique
  commentRef Comment? @relation(fields: [comment], references: [id])
  actor String
  actorRef User @relation(fields: [actor], references: [email])
  issue Int
  issueRef Issue @relation(fields: [issue],references: [id])

  @@index([actor])
  @@index([comment])
}

enum ActivityAction {
  comment
  update
}